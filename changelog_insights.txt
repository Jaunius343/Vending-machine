apparently interfaces have to summarize an action,
I wasn't aware of that, therefore my implementation of interface
which described characteristics can simply be done in a class.

I changed my interface to represent an actual action

added two exception classes

changed floats around money to BigDecimal for more accuracy
	my teacher pointed out that float loses information during calculations 
	and suggested using BigDecimal instead

Added aditional variables in SellWithDiscountException class as suggested by lecturer,
for the possibility for user to check which value threw the exception.
Also minor changes to SellWithDiscount method, as there's no point o sell a product with discount
if it has 0 discount (SellWithDiscount now throws SellWithDiscountException if discount is equal to 0)

Added clone method in my subclasses
Created a new class ProductFactory for object creation.
I found that Factory method works best for my type of project, compared to abstract factory, object pool
or prototype pattern

Added an overloading method in ProductFactory to create not only empty (with default values) objects, but 
with values as well.